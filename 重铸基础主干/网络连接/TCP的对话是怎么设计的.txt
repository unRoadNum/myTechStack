在这篇文章里，我不想思考tcp的建立和释放过程。
我只是想认真想一下tcp的对话是什么样的。

我觉得要考虑清楚这个问题，首先要明白的是：什么叫做会话，什么叫做对话。

理解这两个概念本身是没有意义的，它的出现是为了表达协议设计中出现的问题的。
可以简单的把对话理解成一次请求发送出去了，它就代表一次对话。
而会话呢？一次tcp建立-对话(N)-tcp释放的过程，它就表示了一次的会话过程。

协议的可靠性也要包含对话的可靠性。
那我怎么能保证一次对话的可靠性呢？
通常的办法是使用应答机制。本端的一次请求，对端给回一次响应。

那你会这样想，这样也是有问题的啊。
这样请求丢了，可以通过没有响应来判断。
但是响应丢了怎么办？
那本端收到响应以后，再给对端回一个响应?(这样你就会跌进一个死循环的过程了)

响应的目的是为了保证对话请求的可靠性。 
那响应丢了，索性就丢了吧，就当请求在对端没有收到，让本端再发一次请求吧。
当然得这么做，实践经验告诉我们这是对的。

这是所有协议涉及对话可靠性都这么做的。
但是tcp呢? 
假如tcp这样做了，为了保证对话可靠性，网络中会出现很多的无数据的响应ack报文。
这是不允许的。
tcp是一个基础网络协议，它要给上层提供基础服务的，这样的话，很快网络会撑不住的。
所以tcp的做法是允许无数据的响应ack报文，携带数据。

但是这样就存在着一个问题：ack响应在最初是没有可靠性的，如果在传输过程中丢了，就没办法了。
所以tcp对这种机制还要优化：#它让带数据的ack必须有响应，无数据的ack没有响应#。
这样也没有出现死循环，极大的提高了网络吞吐量，解决了问题。



