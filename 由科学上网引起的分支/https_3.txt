## 以下也说不上是https加密，只是客户端通信加密

作者：车小胖

***
当我们访问知乎网站时，输入https://zhihu.com，需要域名解析，一般有两种结果：
	1）假的IP
	2）真的IP

无论是真假IP，都需要浏览器认证对方是"http://zhihu.com"（Distinguished Name ）的正主。
需要在TLS（Transport Layer Securiy)握手阶段，服务器出示自己对"http://zhihu.com"的证书，

通常由一个CA签名（CA私钥加密的消息摘要）。
由于浏览器已经预先安装该CA的证书，该证书有CA的明文公钥，用CA公钥可以解密服务器出示证书的签名，一旦可以成功解密，
即认为服务器出示的证书可信任，然后检查证书的有效期是有效的，并且没有出现在证书撤销列表CRL，那么认证通过。
然后浏览器从服务器的数字证书，获得服务器的明文公钥，并用该公钥加密一个Master Key传输给服务器，服务器使用自己的私钥解密，获得Master Key。

至此，双方拥有一个共同的秘密“Master Key”。
双方运行相同的伪随机函数（PRF，比如SHA256）。
输入量有 Master Key + Client Nonce (客户端盐，随机码）+ Server Nonce (服务器端盐）。
生成 Encryption Key(加密，防偷窥） 、Integrity Key （HMAC，防篡改），使用对称加密算法AES-CBC，Hash算法 SHA2，完成数据加密/解密，鉴权/认证的工作。
一切看起来都是那么完美无邪…

但，如果客户端安装了一个Root CA，相当于信任该CA签发的任何证书。
而该CA如果不负责任乱签证书。
比如签一个证书“http://zhihu.com"给第三方，那么第三方就可以使用该证书来欺骗客户端，客户端自然就相信对方，并与此建立安全加密TLS连接，中间人可以看到客户端的所有明文数据。
为了杜绝证书欺骗，客户端通常使用一个或几个最值得信赖的CA签发的证书，其它的CA一律无效。
由于CA证书有一个自然寿命，APP客户端可以通过软件版本升级的办法来更新客户端的数字证书的版本。