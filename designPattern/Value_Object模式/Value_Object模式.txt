## 背景
在j2ee软件开发中，通常会对系统模块进行分层。
	1. 展示层主要负责数据的展示，定义数据库的UI组织形式。
	2. 业务逻辑层负责具体的业务逻辑处理。
	3. 持久层通常指数据库及相关操作。
在一个大型系统中，这些层次可能会被分离，并部署在不同的服务器上。
而在两个层次之间，可能会通过远程过程调用RMI等方式进行通信。
展示层作为RMI的客户端，通过中间的业务逻辑层取得一个订单信息。
假设一个订单由客户名、商品名和数量构成，那么RMI的客户端会服务端进行3次交互，依次取得这些信息。
***
### 这样会存在严重的缺陷
	1. 对于获取一个订单对象而言，这个操作模式略显繁杂，且不具备较好的可维护性。
	2. 前后累计进行了3次客户端和服务器的通信，性能成本较高。
***
### 为了解决这个问题
value-object模式提倡将一个对象的各个属性进行封装，将封装后的对象在网络上传递，从而使
系统拥有更好的交互模型，并且减少网络通信数据，从而提高系统性能。
使用value-object模式对以上结构进行改良，定义对象Order，由Order对象维护客户名、商品名和数量等信息，
而Order对象也就是value-object，它必须是一个可串行化的对象。
重要的事说三遍：
它必须是一个可串行化的对象！
它必须是一个可串行化的对象！
它必须是一个可串行化的对象