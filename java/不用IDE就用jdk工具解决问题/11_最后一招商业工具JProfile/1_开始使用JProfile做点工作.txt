#内存视图#
JProfile允许开发人员动态实时地监控应用程序的内存对象分配情况。
还提供了对象分配的调用堆栈信息。 
JProfile以函数方法为索引，显示了每个方法中使用的内存信息。
JProfile还提供了对象分配的热点区域，并可以按照方法、类、包等粒度显示热点区域中内存的使用情况。

#堆快照#
使用Heap Walker菜单命令可以查看当前应用程序的堆快照信息。
单击照相机图标即可导出堆快照。

#CPU视图#
CPU视图可以查看各个函数的CPU占用时间，还能显示函数调用堆栈信息。

例如。
通过Visual VM，开发人员只知道函数getNameById()占用了大量的cpu时间，但是不知道谁调用了它。
而通过JProfile，还可以进一步知道getNamebyId()函数为何会被调用。

除了函数调用堆栈，在CPU视图中，还有函数调用的热点方法，显示了占用了CPU时间最多的函数以及它们的被调用情况。

#线程视图#
在线程视图中，可以看到当前应用程序的线程情况。
在线程快照页面，可以导出当前线程快照。

#JVM统计信息#
JProfile还可以监控jvm虚拟机的性能情况，包括堆栈信息、GC信息、类信息和CPU总体使用情况。

#触发器#
JProfile支持对被监控程序进行基于条件的行为触发。

JProfile支持在方法调用、堆使用率阈值、CPU阈值等条件发生时，触发某些行为。
JProfile所支持的行为种类繁多，功能强大，甚至可以由用户自定义方法切入器，实现复杂的监控行为。

全部配置完成后，保存配置，运行被监控程序。
