Visual VM不仅支持在OQL控制台上执行OQL查询语言，也可以通过其OQL相关的jar包，将OQL写成程序。
这就是所谓的对OQL程序化，这个有利于堆快照分析自动化。

在进行OQL开发前，需要引用Visual VM安装目录下的jar包。

以下是实例。
```
public class OQLPragram {
	private OQLEngine instance;
	
	public OQLEngine() {
	}
	
	public void setUp() throws IOException, URISyntaxException {
		instance = new OQLEngine(HeapFactory.createHeap(new File("d:\\heapdump-1333200344576.hprof")));
	}
	
	public void tearDown() {
	}
	
	public void testForEachClass() throws Exception { //打印所有类名称
		System.out.println("heap.forEachClass");
		String query = 
			"select heap.forEachClass(function(obj) { println(obj.name); })";
		instance.executeQuery(query, null);
	}
	
	public void testIntResult() throws Exception { //执行查询并返回前20个对象
		final boolean[] rslt = new boolean[] { true };
		instance.executeQuery("select a.toString() from java.lang.String a",
			new ObjectVistor() {
				int i = 0;
				
				public boolean visit(Object o) {
					while(i < 20) {
						System.out.println(o);
						i++;
						return false;
					}
					return true;
				}
			)
	}
	
	public void testMultivalue() throws Exception { //执行一个返回多列的查询
		instance.executeQuery(
			"select {content: toHtml(v), size:v.elementCount} from java.util.Vector v",
			new ObjectVisitor() {
				public boolean visit(Object o) {
					System.out.println(o);
					return false;
				}
			});
	}
}
```

