#从监控应用程序概况开始#

通过Visual VM，可以查看应用程序的基本情况。
比如进程ID、Main Class、启动参数等。

单击Tab页面上的Monitor页面，就可以监控应用程序CPU、堆、永久区、类加载和线程数的总体情况。
通过页面的Perform GC和Heap Dump按钮还可以手工执行Full GC和生成堆快照。

#Thread Dump和分析#
Thread页面提供了详细的线程信息。
单击thread dump按钮可以导出当前所有线程的堆栈信息。
在左下角的Thread Inspector中，选中相应的线程，也可以只导出选中线程的栈信息。

如果在Visual VM在当前程序中找到死锁，则会以十分显眼的方式在Threads页面给以提示。

#性能分析#
Visual VM有两个采样器。
在Sampler页面下，显示了cpu和内存这两个采样器。

cpu采样器可以将cpu占用时间定位到方法。
内存采样器可以看当前程序的堆信息。

虽然可以统计到方法的时间，但还是无法给出方法调用堆栈。

在Visual VM的默认统计中，并不包含jdk默认对象的函数调用统计。
可以通过右上角的setting按钮去手工配置。

#快照snapshot#
Visual VM是可以保存某一时刻应用程序的瞬时运行情况，包括程序的堆信息，线程堆栈等。
选中应用程序右键->application snapshot
保存后的快照可以另存为文件，以供日后分析使用。

#内存快照分析#
选中应用程序右键->Heap Dump，可以立即获得当前应用程序的内存快照。

内存快照有4个基本功能页面

Summary
展示了当前内存的整体信息，包括内存大小、实例总数、类总数等。

Classes
以类为索引，显示了每个类的实例占用空间。
在类页面中，还可以对两个不同的内存快照文件进行比较。
这个功能可以帮助开发者快速分析同一应用程序在运行的不同时刻，内存数据产生的变化。
在这个类展示的页面中，如果需要获取指定类的更多信息，可以单击右键，进入该类的实例页面->Show instance View。

在实例页面中，将显示指定类的所有实例。
开发者便可以查看当前内存中，内存数据的实际内容。
在右下角的preference页面中，可以查看到系统中引用这个实例的对象，进而展示对象间的引用关系。

OQL
对象查询功能。

#MBean管理#

#TDA软件#
TDA 是Thread Dump Analyzer的缩写，是一款线程快照分析工具。
当使用jstack或者Visual VM等工具取得线程快照文件后，TDA可以帮助开发者分析导出的线程快照。

TDA作为一款单独的软件运行，也可以在Visual VM中运行。
当作为一个单独的软件运行时，只需要使用TDA打开线程快照文件即可。
当作为Visual VM插件时，只要在Visual VM导出线程快照文件时候，TDA就能自动启动。




