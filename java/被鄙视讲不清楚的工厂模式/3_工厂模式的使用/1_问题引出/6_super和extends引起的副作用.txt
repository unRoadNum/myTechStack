#super和extends引起的副作用#

边界会让java的泛型出现结构上的近似继承关系，可以转换。
但是这种转换会导致容器出现一些副作用，这跟泛型出现的历史是有关系的。
容器的部分功能由于这种转换关系，有失效问题。

还是以刚才的Plate为例。
可以对盘子做两件事：1. 往盘子里set东西。2. 从盘子中get东西。
```
class Plate<T> {
	private T item;
	public Plate(T t){ item = t; }
	public void set(T t) { item = t; }
	public T get() { return item; }
}
```

#上界<? extends T>不能往里存，只能往外取#
<? extends Fruit>会让盘子set东西失效，但是get东西方法有效。
为什么呢？编译器只能知道容器里面放的是Fruit或者它的派生类，但具体是什么类型是不知道的。
容器里面的元素利用占位符CAP#1来表示。 
Plate<?>单纯的表达：盘子里放了一个东西，但具体是什么的东西不知道。

#下界<? super T>不影响往里面存，但是往外取只能放在Object对象里#
使用下界<? super Fruit>会使盘子里取东西的get方法失效，只能存放Object对象里。set方法正常。
```
Plate<? super Fruit> p = new Plate<Fruit>(new Fruit());

//set正常
p.set(new Fruit());
p.set(new Apple());

//读取来的东西只能放在Object对象里
//Apple newFruit3 = p.get();   error
//Fruit newFruit1 = p.get();  error
Object newFruit2 = p.get();
```
因为下界规定了元素的最小粒度，实际上是放松了容器的类型控制。
既然元素是Fruit的基类，那往里存比Fruit小的都可以，但是往外读取就费劲了，只有所有类的基类Object对象才能存下。

#PECS#
PECS(Producer Extends Consumer Super);
1. 频繁往外读取内容的，适合上界extends
2. 经常放里面插的，适合下界super
