#extends和super#

这两个边界符都是解决泛型之间转换关系的。
要不苹果、水果有明显的继承关系，但是装它们的盘子却没有关系。
事实上，在泛型上实现继承关系比较困难，所以java才会折衷的提供了这种转换关系。

它们只是解决了这种转换关系，并不能从根本上让装水果的盘子装苹果。
还会出现一些副作用，这个后面会介绍。

#extends#
```
Plate<? extends Fruit>
```
上界通配符。
它表示：一个能放水果以及一切是水果派生的盘子。啥水果都能放的盘子。
比如，Plate<? extends Apple>是java想用来用来代替Plate<Apple>基类作用的。
即，Plate<? extends Apple> plate = new Plate<Apple>(new Apple());
它提供了装苹果、梨等盘子向上转型的可能性。

#super#
```
Plate<? super Fruit>
```
下界通配符，和extends相反，表示一个能放水果以及一切是水果基类的盘子。
比如，Plate<? super Fruit>是java想用来代替Plate<Fruit>以及像Plate<Object>基类作用的，但不是Plate<Apple>的基类。
它给泛型树上方的，类似Plate<Fruit>、Plate<Object>等提供转换作用。
即，Plate<? super Fruit> plate = new Plate<Fruit>(new Fruit());


它们两将泛型的转换关系分成了两段来处理。
上面是: Plate<? super Fruit> 是Plate<Fruit>的父类。
下面是：Plate<? extends Fruit>是Plate<Apple>的父类。
注意这个上面只是从树形关系图上说的上面，上面有下界通配符; 下面有上界通配符。一分为二。
