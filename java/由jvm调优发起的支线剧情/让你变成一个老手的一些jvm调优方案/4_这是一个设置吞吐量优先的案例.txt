吞吐量优先的方案将会尽可能的减少系统的执行垃圾回收的总时间。
所以这种方案，优先考虑关注系统吞吐量的并行回收收集器。

例如，如下是在拥有4GB内存和32核cpu的计算机，进行吞吐量优先的优化：
java -Xmx3800m	-Xms3800m -Xmn2g -Xss128k -XX:+UseParallelGC -XX:ParallelGCThreads=20 -XX:+UseParallelOldGC

-Xms3800m -Xms3800m: 这是一个稳定堆的配置，避免堆内存的频繁震荡。
-Xss128k： 减少线程栈的大小。这样可以使得剩余内存支持更多的线程。
-Xmn2g: 设置新生代的大小。
-XX:+UseParallelGC: 新生代使用并行回收收集器。这是一个关注吞吐量的收集器。
-XX:ParallelGCThreads： 设置用于垃圾回收的线程数，通常情况下可以和CPU数量相等。
-XX:+UseParallelOldGC: 老年代也使用并行回收收集器。