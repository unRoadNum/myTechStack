#不变模式#
当开发并行软件的过程中，同步操作是必不可少的。
当多线程对同一个对象进行读写操作时，为了保证对象数据的一致性和正确性，有必须要对对象进行同步。
而同步操作对系统性能有相当的消耗。
为了尽可能去除这些同步操作，提高并行程序性能，可以使用一种不可改变的对象。
依靠对象的不变性，可以确保其在没有同步操作的多线程环境中依然保持内部状态的一致性和正确性，这就是不变模式。

不变模式和只读属性
不变模式和只读属性是有一定的区别的。不变模式比只读属性具有更强的一致性和不变性。
对于只读属性的对象而言，对象本身并不能被其他线程修改，但是对象自己却能够修改自己的状态。
比如，一个对象的存活时间（对象创建时间和当前时间差）是只读的，因为任何一个第三方线程都不能修改这个属性，但是这个一个可变的属性。
随着时间的推移，存活时间时刻都在发生变化。而不变模式则要求，无论出于什么原因，对象自创建后，其内部状态和数据保持绝对的稳定。

不变模式的实现
实现不变模式需要注意的地方：
1. 去除setter方法以及所有修改自身属性的方法
2. 将所有属性设置为私有，并用final标记，确保其不可修改
3. 确保没有子类可以重载修改它的行为
4. 有一个可以创建完整对象的构造函数

```
public final class Product {		//确保没有子类
		private final String no;	//私有属性，不会被其他对象获取
		private final String name; 	//final保证属性不会被2次赋值
		private final double price;
		
		public Product(String no, String name, double price) {
			//在创建对象时，必须制定数据
			super();		//因为创建之后，无法进行修改
			this.no = no;
			this.name = name;
			this.price = price;
		}
		
		public String getNo() {
			return no;
		}
		
		public String getName() {
			return name;
		}
		
		public String getPrice() {
			return price;
		}
}
```

在JDK中，不变模式的应用非常广泛。其中，最为典型的就是java.lang.String类。
此外，所有的元数据类包装类，都是使用不变模式实现的。 
主要的不变模式如下：
java.lang.String
java.lang.Boolean
java.lang.Byte
java.lang.Character
java.lang.Double
java.lang.Float
java.lang.Integer
java.lang.Long
java.lang.Short

不变模式通过回避问题不是解决问题的态度来处理多线程并发访问控制。
不变模式是不需要进行同步操作的。
由于并发同步会对性能产生不良的影响，因此在需求允许的情况下，不变模式可以提高系统的并发性能和并发量。







