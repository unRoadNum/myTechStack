# synchronized原理

***
JVM基于进入和退出Monitor对象来实现代码块同步和方法同步，两者实现细节不同。

代码块同步：
在编译后通过将monitor enter指令插入到同步代码块的开始处，将monitor exit指令插入到方法结束处和异常处，通过反编译字节码可以观察到。
任何一个对象都有一个monitor与之关联，线程执行monitor enter指令时，会尝试获取对象对应的monitor的所有权，即尝试获得对象的锁。

方法同步：
synchronized方法在method_info结构有ACC_synchronized标记，线程执行时会识别该标记，获取对应的锁，实现方法同步。
两者虽然实现细节不同，但本质上都是对一个对象的监视器（monitor）的获取。
任意一个对象都拥有自己的监视器，当同步代码块或同步方法时，
执行方法的线程必须先获得该对象的监视器才能进入同步块或同步方法，没有获取到监视器的线程将会被阻塞，并进入同步队列，状态变为BLOCKED。
当成功获取监视器的线程释放了锁后，会唤醒阻塞在同步队列的线程，使其重新尝试对监视器的获取。
