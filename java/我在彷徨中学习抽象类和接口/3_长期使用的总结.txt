在学习的时候，可以通过上述的123点来分析研究一个问题，了解它的深层次含义。

但是我们需要对它进行一些提炼，在长期的进行一些规则的约束。

首先，我们知道了interface是对动作的抽象，体现一种"like a"的思想，而abstract class是对本质的抽象，是一种"is a"的含义。
对于抽象类，比如男人、女人这两种类，那我们可以为这两个类设计一个更高级别的抽象类-人。
对于接口，我们可以坐着吃饭，可以站着吃饭，可以用筷子吃饭，可以用叉子吃饭，甚至可以学三哥一样用手抓着吃饭，
那么可以把这些吃饭的动作抽象成一个接口――吃饭。

所以在java和c#中，一个类只能继承一个抽象类(因为你不可能同时是生物又是非生物)。
但是一个类可以同时实现多个接口，比如开车接口、滑冰接口、啪啪啪接口、踢足球接口和游泳接口。

总结一下：
1. 抽象类和接口都不能被实例化。
2. 抽象类要被子类继承(extends), 接口要被子类实现(implements)。
3. 接口里面只能对方法进行声明，抽象类既可以对方法进行声明也可以对方法进行实现。
4. 抽象类的抽象方法必须全部被子类实现，如果子类不能全部实现，那么子类也必须是抽象类。
接口里面的方法也必须全部被子类实现，如果子类不能实现那么子类必须是抽象类。
5. 接口里面的方法只能声明，不能有具体的实现。这说明接口是设计的结果，抽象类是重构的结果。
6. 抽象类里面可以没有抽象方法。
7. 如果一个类里面有抽象方法，那么这个类也一定是抽象类。
8. 抽象类中的方法必须要被实现，所以抽象方法不能是静态的static，也不能是私有的private。
9. 接口(类)可以继承接口，甚至可以继承多个接口。但是类只能继承一个类。
10. 抽象类主要是用来抽象类别，接口主要是用来抽象方法功能。
当你关注事物的本质的时候，请用抽象类; 当你关注一种操作的时候，用接口。
11. 抽象类的功能应该要远多于接口，但是定义抽象类的代价较高。
因为java一个类只能继承一个父类，即你在设计这个类的时候必须要抽象出所有类的子类所具有的共同属性和方法。
但是类(接口)却可以继承多个接口。
