抽象类
abstract class和interface在java语言中都是用来进行抽象类定义的。
那么什么是抽象类，使用抽象类能为我们带来什么好处呢？

在面向对象的概念上，我们知道所有的对象都是通过类来描述的，但是反过来却不是这样的。
并不是所有的类都是用来描绘对象的。
如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。

抽象类往往用来表述我们在对#问题领域#进行分析、设计中得到的抽象概念，
是对一系列看上去不同，但是本质上相同的具体概念的抽象。

例如：
如果我们进行一个图形编辑软件的开发，就会发现问题领域存在着圆、三角形这样一些具体概念。
它们是不同的，但它们又都属于形状这样一个概念，形状这个概念在问题领域是不存在的，它就是一个抽象的概念。

正是因为抽象的概念在问题领域没有对应的具体概念，所以用以#表征抽象概念的抽象类是不能够被实例化的#。

在面向对象领域，抽象类主要用来进行类型隐藏。
我们可以构造一个固定的一组行为的抽象描述，但是这组行为却能够有任意个可能的具体实现方式。
这个抽象描述就是抽象类，而这组任意个可能的具体实现则表现为所有可能的派生类。

模块可以操作抽象体。
由于模块依赖于一个固定的抽象体，因此它可以是不允许修改的。
同时，通过从这个抽象体派生，也可以扩展此模块的行为功能。
熟悉OCP的读者一定知道，为了能够实现面向对象设计的一个最核心的原则OCP(Open-Closed Priciple)，抽象类是其中的关键所在。