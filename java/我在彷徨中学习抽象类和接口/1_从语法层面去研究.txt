从语法定义层面看abstract class和interface 

在语法层面，Java语言对于abstract class和interface给出了不同的定义方式，下面以定义一个名为Demo的抽象类为例来说明这种不同。 

使用abstract class的方式定义Demo抽象类的方式如下： 
```
abstract class Demo {
	abstract void method1(); 
	abstract void method2(); 
...
}
```
使用interface的方式定义Demo抽象类的方式如下： 
```
interface Demo { 
	void method1(); 
	void method2(); 
.. 
} 
```
在abstract class方式中, Demo可以有自己的数据成员，也可以有非abstarct的成员方法。
而#在interface方式的实现中，Demo只能够有静态的不能被修改的数据成员（也就是必须是static final的，不过在interface中一般不定义数据成员）#。
所有的成员方法都是abstract的。
从某种意义上说，interface是一种特殊形式的abstract class。 

从编程的角度来看，abstract class和interface都可以用来实现"design by contract"的思想。
但是在具体的使用上面还是有一些区别的。 

首先，abstract class在Java语言中表示的是一种继承关系，一个类只能使用一次继承关系。
但是，一个类却可以实现多个interface。
也许，这是Java语言的设计者在考虑Java对于多重继承的支持方面的一种折中考虑吧。 

其次，在abstract class的定义中，我们可以赋予方法的默认行为。
但是在interface的定义中，方法却不能拥有默认行为，为了绕过这个限制，必须使用委托，但是这会增加一些复杂性，有时会造成很大的麻烦。 

在抽象类中不能定义默认行为还存在另一个比较严重的问题，那就是可能会造成维护上的麻烦。
因为如果后来想修改类的界面（一般通过abstract class或者interface来表示）以适应新的情况（比如，添加新的方法或者给已用的方法中添加新的参数）时，
就会非常的麻烦，可能要花费很多的时间（对于派生类很多的情况，尤为如此）。
但是如果界面是通过abstract class来实现的，那么可能就只需要修改定义在abstract class中的默认行为就可以了。 

同样，如果不能在抽象类中定义默认行为，就会导致同样的方法实现出现在该抽象类的每一个派生类中，违反了"one rule，one place"原则，造成代码重复，同样不利于以后的维护。
因此，在abstract class和interface间进行选择时要非常的小心。 

