#模式结构#
Master进程为主要进程，它维护了一个Worker进程队列、子任务队列和子结果集。
Worker进程队列中的Worker进程，不停的从任务队列中提取要处理的子任务，并将子任务的处理结果写入结果集。

#模式活动角色划分#
Worker: 用于实际处理一个任务
Master: 用于任务的分配和最终结果的合成
Main: 启动系统，调度开启Master

详细实现
```
public class Master {
	//任务队列
	protected Queue<Object> workQueue = new ConcurrentLinkedQueue<Object>();
	//Worker进程队列
	protected Map<String, Thread> threadMap = new HashMap<String, Thread>();
	//子任务处理结果集
	protected Map<String, Object> resultMap = new ConcurrentHashMap<String, Object>();
	
	//是否所有的子任务都结束了
	public boolean isComplete() {
		for(Map.Entry<String, Thread> entry: threadMap.entrySet()) {
			if(entry.getValue().getState() != Thread.State.TERMINATED) {
				return false;
			}
		}
		return true;
	}
	
	//Master的构造函数，需要一个Worker进程逻辑，和需要的Worker进程数量
	public Master(Worker worker, int countWorker) {
		worker.setWorkQueue(workQueue);
		worker.setResultMap(resultMap);
		for(int i=0; i < countWorker; i++)
			threadMap.put(Integer.toString(i), new Thread(worker, Integer.toString(i)));
	}
	
	//提交一个任务
	public void submit(Object job) {
		workQueue.add(job);
	}
	
	//返回子任务结果集
	public Map<String, Object> getResultMap() {
		return resultMap;
	}
	
	//开始所有的worker进程，进行处理
	public void execute() {
		for(Map.Entry<String, Thread> entry: threadMap.entrySet()) {
			entry.getValue().start();
		}
	}
}

public class Worker implements Runnable {
	//任务队列，用于取得子任务
	protected Queue<Object> workQueue;
	//子任务处理结果集
	protected Map<String, Object> resultMap;
	
	public void setWorkQueue(Queue<Object> workQueue) {
		this.workQueue = workQueue;
	}
	
	public void setResultMap(Map<String, Object> resultMap) {
		this.resultMap = resultMap;
	}
	
	//子任务处理的逻辑，在子类中实现具体的逻辑
	public Object handle(Object input) {
		return input;
	}
	
	@Override
	public void run() {
		while(true) {
			//获取子任务
			Object input = workQueue.poll();
			if(null == input) break;
			//处理子任务
			Object re = handle(input);
			//将处理结果写入结果集
			resultMap.put(Integer.toString(input.hashCode()), re);
		}
	}
}

//Worker对象在应用层的实现
public class PlusWorker extends Worker {
	public Object handle(Object input) {	//Worker，求立方和
		Integer i = (Integer)input;
		return i*i*i;
	}
}

//使用Master-Worker模式的主函数
public class Main {
	public static void main(String[] args) {
	
		Master m = new Master(new PlusWorker(), 5);		//固定使用5个worker
		for(int i = 0; i < 100; i++)
			m.submit(i); 	//提交100个子任务
		m.execute();		//开始计算
		int re = 0; 		//最终计算结果保存于此
		Map<String, Object> resultMap = m.getResultMap();
		while(resultMap.size() > 0 || !m.isComplete()) {
		//不需要所有worker都执行完，即可开始计算最终结果
			Set<String> keys = resultMap.keySet();
			String key = null;
			for(String k: keys) {
				key = k;
				break;
			}
			Integer i = null;
			if(key != null) {
				i = (Integer)resultMap.get(key);
			}
			if(i != null) {
				re += i;  //最终结果
			}
			if(key != null)
			{
				resultMap.remove(key);		//移除已经被计算过的项
			}
		}
	}
}
```
