由于ScheduledExecutorService接口比较特殊，所以不做深入了解。

无论是newFixedThreadPool()、newSingleThreadExecutor()，还是newCachedThreadPool()方法，其内部实现均使用了ExecutorPoolExecutor;
```
public static ExecutorService newFixedThreadPool(int nThreads) {
	return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
};

public static ExecutorService newSingleThreadExecutor() {
	return new FinalizableDelegatedExecutorService(
	new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
};

public static ExecutorService newCachedThreadPool() {
	return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new synchronousQueue<Runnable>());
};
```
为什么ExecutorPoolExecutor有这么强大的功能呢？
必须得研究ExecutorPoolExecutor的构造函数，如下：
```
public ThreadPoolExecutor(int corePoolSize,
						int maximumPoolSize,
						long keepAliveTime,
						TimeUnit unit,
						BlockingQueue<Runnable> workQueue,
						ThreadFactory threadFactory,
						RejectedExecutionHandler handler);
```
corePoolSize: 指定了线程池中线程数量。
maximumPoolSize: 指定了线程池中最大线程数量。
keepAliveTime: 当线程池线程数量超过corePoolSize时，多余的空闲线程的存活时间。即，超过corePoolSize的空闲线程，在多长时间内会别销毁。
unit: keepAliveTime的单位。
workQueue: 任务队列，被提交但尚未被执行的任务。
threadFactory: 线程工厂，用于创建线程，一般用默认的即可。
handler: 拒绝策略。当任务太多来不及处理时，如何拒绝任务。

参数workQueue指被提交但未执行的任务队列，它是一个BlockingQueue接口的对象，仅用于存放Runnable对象。
根据队列功能分类，在ThreadPoolExecutor的构造函数中可使用以下几种BlockingQueue：

1. 直接提交的队列
该功能由SynchronousQueue对象提供。
SynchronousQueue是一个特殊的BlockingQueue。 
SynchronousQueue没有容量，每一个插入操作都要等待一个相应的删除操作。反之，每一个删除操作都要等待对应的插入操作。
SynchronousQueue不保存任务，它总是将任务提交给线程执行，如果没有空闲的线程，则会尝试创建新的线程。
如果线程数量已经到最大值，则执行拒绝策略。
因此，使用SynchronousQueue队列，通常要设置很大的maximumPoolSize值，否则很容易执行异常策略。

2. 有界的任务队列
有界的任务队列可以使用ArrayBlockingQueue实现。
ArrayBlockingQueue的构造函数必须带一个容量参数，表示该队列的最大容量。
public ArrayBlockingQueue(int capacity);
当使用有界的任务队列时，若有新的任务需要执行，如果线程池的实际线程数小于corePoolSize，则会优先创建新的线程。
若大于corePoolSize，则会将新任务加入等待队列。
	* 若等待队列已满，无法加入，则
		** 在总线程数不大于maximumPoolSize的前提下，创建新的线程执行任务
		** 如果总线程数大于maximumPoolSize，则会执行拒绝策略
可见，有界队列仅当任务队列装满时，才可能将线程数提升到corePoolSize以上。

3. 无界的任务队列
无界的任务队列可以通过LinkedBlockingQueue类实现。
与有界队列相比，除非系统资源耗尽，否则无界的任务队列不存在任务入队失败的情况。
当有新的任务到来，系统的线程数小于corePoolSize时，线程池会生成新的线程执行任务，但当系统的线程数达到corePoolSize时，就不会继续增加。
若后续又有新的任务到来，而又没有空闲的线程资源，则任务直接进入队列等待。
若任务创建和处理的速度差异巨大，无界队列会保持快速增长，直到内存耗尽。

4. 优先任务队列
优先任务队列是带有执行优先级的队列，它通过PriorityBlockingQueue实现。
可以控制任务的执行先后顺序，是一个特殊的无界队列。
无论是有界队列ArrayBlockingQueue，还是未指定大小的无界队列LinkedBlockingQueue都是按照先进先出算法处理任务的。
而PriorityBlockingQueue可以根据任务自身的优先级顺序先后执行，在确保系统性能的同时，也能有很好的质量保证。



