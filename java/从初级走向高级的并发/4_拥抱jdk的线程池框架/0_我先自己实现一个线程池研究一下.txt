代码走起来
```
public class ThreadPool {
	private volatile static ThreadPool inst = null; //volatile保证语句2 happens-before 语句1
	
	//空闲的线程队列
	private List<PThread> idleThreads;
	//已有的线程总数
	private int threadCounter;
	private boolean isShutDown = false;
	
	private ThreadPool() {
		this.idleThreads = new Vector(5);
		threadCounter = 0;
	}
	
	public ThreadPool getInstance() {
		if(inst == null)  // 语句1
		{
			synchronized(ThreadPool.class) {
				inst = new ThreadPool();  //语句2
			}
		}
		return inst;
	}
	
	public int getCreatedThreadsCount() {
		return threadCounter;
	}
	
	//将线程放入池中
	protected synchronized void repool(PThread repoolingThread) {
		if(!isShutDown) {
			idleThreads.add(repoolingThread);
		}else {
			repoolingThread.shutDown();
		}
	}
	
	//停止池中所有线程
	public synchronized void shutdown() {
		isShutDown = true;
		for(int threadIndex = 0; threadIndex < idleThreads.size(); threadIndex++) {
			PThread idleThread = (PThread)idleThreads.get(threadIndex);
			idleThread.shutdown();
		}
	}
	
	//执行任务
	public synchronized void start(Runnable target) {
		PThread thread = null;
		//如果有空闲线程，则直接使用
		if(idleThreads.size() > 0) {
			int lastIndex  = idleThreads.size() - 1;
			thread = (PThread)idleThreads.get(lastIndex);
			idleThreads.remove(lastIndex);
			//立即执行这个任务
			thread.setTarget(target);
		}else {
			//没有空闲线程，则创建新线程
			threadCounter++;
			//创建新线程
			thread = new PThread(target, "PThread #" + threadCounter, this);
			//启动这个线程
			thread.start();
		}
	}
}

//要使用上面这个线程池，需要一个永不退出的线程与之配合
public class PThread extends Thread {
	//线程池
	private ThreadPool pool;
	
	//任务
	private Runnable target;
	private boolean isShutDown = false;
	private boolean isIdle = false;
	
	public PThread(Runnable target, String name, ThreadPool pool) {
		super(name);
		this.pool = pool;
		this.target = target;
	}
	
	public Runnable getTarget() {
		return target;
	}
	
	public boolean isIdle() {
		return isIdle;
	}
	
	public void run() {
		//只要没有关闭，则一直不结束线程
		while(!isShutDown) {
			isIdle = false;
			if(target != null) {
				//执行任务
				target.run();
			}
			//任务结束了，到闲置状态
			isIdle = true;
			try {
				//该任务结束后，不关闭线程，而是放入线程池空闲队列
				pool.repool(this);
				synchronized(this) {
					//线程空闲，等待新的任务到来
					wait();
				}
			}catch(InterruptedException e){
			}
			isIdle = false;
		}
	}
	
	public synchronized void setTarget(java.lang.Runnable newTarget) {
		target = newTarget;
		//设置了任务之后，通知run方法，开始执行这个任务
		notifyAll();
	}
	
	//关闭线程
	public synchronized void shutDown() {
		isShutDown = true;
		nitifyAll();
	}
}

//使用该线程
//首先，定义一个线程类，作为任务对象
public class MyThread implements Runnable {
	protected String name;
	
	public MyThread() {
	}
	
	public MyThread(String name) {
		this.name = name;
	}
	
	@override
	public void run() {
		try {
			Thread.sleep(100); 		//使用sleep方法代替一个具体的功能的执行
		}catch(InterruptedException e) {
			e.printStackTrace();
		}
	}
}

//调度1000个线程
for(int i=0; i < 1000; i++) {
	ThreadPool.getInstance().start(new MyThread("testThreadPool" + Integer.toString(i)));
}
```