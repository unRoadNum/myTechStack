#分析参与者#
Main对象：系统启动时，调用Client发出请求
Client对象： 返回Data对象，立即返回FutureData，并触发装配RealData线程
Data对象：返回数据的接口
FutureData对象：Future数据，构造很快，但是是一个虚拟数据，需要装配RealData
RealData对象: 真实数据，其构造是比较慢的

#实现#
```
public class Main {
	public static void main(String[] args) {
		Client client = new Client();
		//这里会立即返回，因为得到的是FutureData而不是RealData
		Data data = client.request("name");
		System.out.println("请求完毕");
		try {
			/* 这里可以用一个sleep代替对其他业务逻辑的处理
			 * Thread.sleep(2000); */
		} catch(InterruptedException e) {
		}
		//使用真实数据
		System.out.println("数据 = " + data.getResult());
	}
}

public class Client {
	public Data request(final String queryStr) {
		new Thread() {
			public void run() {
				//RealData的构建很慢，所以在单独的线程中进行
				RealData realdata = new RealData(queryStr);
				future.setRealData(realdata);
			}
		}.start();
		return future;		//FutureData会被立即返回
	}
}

public interface Data {
	public String getResult ();
}

public class futureData implements Data {
	protected RealData realdata = null; 		//futureData是realData的包装
	protected boolean isReady = false;
	public synchronized void setRealData(RealData realdata) {
		if(isReady) {
			return;
		}
		
		this.realdata = realdata;
		isReady = true;
		notifyAll();		//realdata已经被注入，通知getResult();
	}
	public synchronized String getResult()  //会等待realData构造完成
	{
		while(!isReady) {
			try {
				wait();			//一直等待，知道RealData被注入
			}catch(InterruptedException e) {
			}
		}
		return realData.result();		//由realData实现
	}
}

public class RealData implements Data {
	protected final String result;
	public RealData(String para) {
		//RealData可能够构造很慢，需要等待很久，这里使用sleep模拟
		StringBuffer sb = new StringBuffer();
		for(int i=0; i < 10; i++) {
			sb.append(para);
			try {
				Thread.sleep(100); //这里使用sleep，代表一个很慢的过程
			}catch(InterruptedException e) {
			}
		}
		result = sb.toString();
	}
	public String getResult() {
		return result;
	}
}
```
