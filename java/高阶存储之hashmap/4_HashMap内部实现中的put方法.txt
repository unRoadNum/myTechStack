#put方法#

put方法要考虑的因素有几点：
1. 如何构造hash索引，才能使得冲突最小
2. 如果发生冲突，是用头插法，还是用尾插法来组织到单链表中
3. put的时候，如果bucket超过阈值，怎么resize？
4. 假如resize了，怎么把旧的bucket的Entry转移到新的bucket中。

#构造索引#

#hashCode#
java中有个hashCode方法，这个方法被写在了Object类中。
public native int hashCode();
#这个东西的存在就是为了给不同的对象生成的不同返回值#
java这样做了以后，虽然会给查找带来重大的意义(不同对象不同hashCode，定位到不同的对象，可能jvm就是这样实现找对象的？)。 
ps: 查阅了一下资料，hashCode在Object类中的默认实现是"将该对象的内部地址转换成一个整数返回"。
而且不同的散列值，在Map中将Entry放到不同的bucket中也会非常方便。
百度上查了很多写equals和hashCode关系的，我认为只需要理解：jvm就想用hashCode自己能方便找到不同的对象。
当你new一个对象的时候，会生成一个不同的hashCode。

#==与equals#
java是不支持操作符重载的，所以才会出现equals方法这个东西。
Object提供类重载equals方法，方便用户依据需求去调整对象相等的标准。
这里有两个要说明的地方：
1. 重载equals方法常用于对象比较，虽然java是everything is Object，但不是还有未包装的基本类型么。
2. 用户重载equals方法，自己写两个对象相等的依据，比如String类就这样干了。
所以也能看出来，==主要用来判断两个未经包装的基本类型相等的，而equals是用来判断两个对象相等的。

这就是为什么会有那么多if(a == b || a.equals((Object)b)) 这个东西的存在
但是得注意Object默认的equals的形参类型是Object，你必须自己向下转型。

但是，java约定：如果equals方法相等的两个对象，他们的hashCode必须相等。
凡是约定，不要看说的好听，其实就是为了规避某种问题，或者为了给自己提供便利。
所以私以为这样做就是为了让jvm只需要保存一份对象。 
既然你都敢自己写equals说它两相等，我们就认为这两就是同一个事儿，所以我就保存一份。






