#类的生命周期#

因为static变量被类的使用者（包括它的实例、static方法）共享，
当然不能在类构造方法中进行空间分配、初始化等操作了。

为什么不能？
思考这个问题的惯用思路是，你去做这个事情，看看就知道了。
假如我在类构造方法中去初始化：
那我在用Math.sin()这个静态方法的时候，没有初值怎么办。

如果我是它的设计者，自然而然的想到：
它的初始化工作最好是在它的static方法和实例化之前就完成。

这就不得不涉及到类的生命周期了。
jvm为了更好的控制class这种字节码文件的运行，将类的运行划分成几个阶段进行：
#加载->连接->初始化->使用->卸载#

#加载#
1. jvm找到需要加载的类并把信息加载类的jvm的方法区中。
2. 在堆中实例化一个java.lang.Class对象，作为方法区这个类的信息的入口。

#链接#
1. 验证加载类的合法性。
2. 在方法区给静态变量分配内存，并设置为jvm默认的初值。
> 基本类型（int、long、short、char、byte、boolean、float、double）的默认值为0
引用类型的默认值为null
常量的默认值为我们程序中设定的值，比如我们在程序中定义final static int a = 100，则准备阶段中a的初值就是10
3. 把方法区的常量池中符号引用转换为直接引用。

#初始化#
什么初始化很关键？
我们加载类的时候，最好在使用它之前来完成初始化。
总而言之，jvm会保证在你使用这个类之前完成初始化。
怎么初始化？
按照顺序自上而下运行类中的变量赋值语句和静态语句，
如果有父类，则首先按照父类顺序自上而下运行类的变量赋值语句和静态语句。
