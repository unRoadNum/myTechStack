#从static关键字开始#

说起static关键字，我觉得不应该是记住static关键字的用法规则。

什么时候该用static关键字？static关键字解决什么问题？

java编程思想里面有句话说的特别好：
> 如果缺乏历史的眼光，很快我们就会对什么时候使用那些类以及什么时候
不该使用它们感到迷惑。

java出现在c后面，它肯定要解决c开发过程中出现的各种问题。
有些东西的出现，就是为了更优雅的处理c遇到过的问题。
static关键字也有这方面的原因。

我们在c中往往会遇到多个文件共享变量的需求，通常会用extern或者include来解决。
从模块的高度上讲：
如果两个文件都用到了同一个变量，那么它其实在上层都属于同一个模块。

如果一个项目维护到了后期，往往会出现不同层次的模块extern同一个变量这种问题。
这个时候，项目的维护工作充满了痛苦。
只要改动这个模块的值，另一个模块都会受到影响。
如果没有自动化测试用例的保证，就会难受想哭。

java如何才能更优雅的减少这种问题的影响呢？

以下是我个人的理解。
在保证everything is object这个大的思想之内，
通过在类中引入static变量。
有效的限制了变量的使用范围，规避模块感染。
更好的定义了变量的归属，它就属于这个类，在代码的初始阶段到后续阶段都不允许发生变化。
除非这个类已经不存在了。
c的这种问题也往往是因为不能准确定义到extern变量的归属才造成的滥用。

上面足以出现static关键字来修改变量了。
刚开始或许static就是用来修饰变量的。

